@using CC98
@using CC98.Achievement.Controllers
@using Microsoft.AspNetCore.DataProtection
@using System.Diagnostics
@model AchievementAndUserRecordInfo
@inject AppSettingService<SystemSetting> AppSettingService
@inject IDataProtectionProvider DataProtectionProvider

@{
	// 分类信息
	var category = (AchievementCategory)ViewBag.Category;

	// 数据保护服务
	var dataProtector = DataProtectionProvider.CreateProtector(nameof(AchievementDbContext), category.CodeName.ToLowerInvariant());
	var code = dataProtector.Protect(Model.Item.CodeName);

	// 是否已经完成，这影响是否彩色显示
	var isCompleted = Model.CompleteState == AchievementCompleteState.Completed;

	// 是否隐藏，隐藏内容会用隐藏模板替代
	var shouldHide = Model.Item.State == AchievementState.Hidden && !isCompleted;

	// 实际要显示的数据
	var itemData =
		shouldHide
			? AppSettingService.Current.HiddenItemTemplate
			: Model.Item;

	// 成就底色
	var cardColor = Model.Item.State switch
	{
		AchievementState.Hidden => "purple",
		AchievementState.Special => "yellow",
		_ => "teal"
	};

	if (!isCompleted)
	{
		cardColor = string.Empty;
	}

	var (iconUri, shouldGrayedOut) = GetRealIconUri(itemData, category, shouldHide, isCompleted);
}

<a class="special card @cardColor" asp-controller="Achievement" asp-action="Detail" asp-route-category="@category.CodeName" asp-route-name="@code">

	<div class="middle aligned content">

		<div style="display: flex; flex-direction: row; color: rgba(0,0,0,0.85);">
			<div style="flex: 0 0 content;">

				<img class="ui tiny image" asp-conditional-class-gray="@shouldGrayedOut" src="@iconUri" alt="成就图标" style=""/>

				@if (!shouldHide)
				{
					<partial name="_DetailPopover" model="@Model"/>
				}
			</div>
			<div class="content" style="flex: 1 1 auto; display: flex; flex-direction: column; justify-content: center; margin-left: 1rem;">
				<h3 class="header">@itemData.DisplayName</h3>
				<div class="description">@itemData.Description</div>
			</div>
		</div>

		@* 		<img class="ui left floated tiny image" asp-conditional-class-gray="@(!isCompleted)" src="@GetRealIconUri(itemData, category, shouldHide)" alt="成就图标" />

		@if (!shouldHide)
		{
		<partial name="_DetailPopover" model="@Model" />
		}

		<div class="header">@itemData.DisplayName</div>
		<div class="description">@itemData.Description</div> *@

	</div>


	@if (Model.Record != null)
	{
		switch (Model.CompleteState)
		{
			case AchievementCompleteState.Completed:

				switch (itemData.State)
				{
					case AchievementState.Special:
						<div class="ui yellow right corner label">
							<div data-tooltip="这是一个特殊成就。在你获得这个成就之前，你无法看到这个成就的任何信息。你获得的特殊成就数量将单独记录在成就数据页面，不计入成就总数。">
								<i class="star icon"></i>
							</div>
						</div>

						break;
					case AchievementState.Hidden:
						<div class="ui purple right corner label">
							<div data-tooltip="这是一个隐藏成就。在你获得这个成就之前，你只能看到“隐藏的成就”字样。">
								<i class="star outline icon"></i>
							</div>
						</div>
						break;
				}
				break;

			case AchievementCompleteState.Progress:

				<div class="ui bottom blue attached progress" data-value="@Model.Record.CurrentValue" data-total="@Model.Item.MaxValue">
					<div class="bar"></div>
				</div>

				break;
		}
	}

</a>

@functions
{
	/// <summary>
	/// 获取成就项需要显示的实际图标。
	/// </summary>
	/// <param name="item">要显示的成就项目。</param>
	/// <param name="category">成就项目对应的分类。</param>
	/// <param name="isHidden">该项目是否隐藏。</param>
	/// <param name="isCompleted">该项目是否已完成。</param>
	/// <returns>实际显示项目的 URL，以及是否需要灰色显示图案。</returns>
	private (string? Url, bool ShouldGrayedOut) GetRealIconUri(AchievementItem item, AchievementCategory category, bool isHidden, bool isCompleted)
	{
		var setting = AppSettingService.Current;

		// 正常图标: 专属 -> 分类 -> 全局
		(string? Url, bool ShouldGrayedOut)[] normalIconSources =
		[
			(item.IconUri, false),
			(category.DefaultIconUri, false),
			(setting.DefaultIconUri, false)
		];

		// 隐藏图标: 分类隐藏 -> 全局隐藏模板
		(string? Url, bool ShouldGrayedOut)[] hiddenIconSources =
		[
			(category.DefaultHideIconUri, false),
			(setting.HiddenItemTemplate.IconUri, false),
		];

		// 灰色图标：专属灰色 -> 专属图标灰度版 -> 分类灰色 -> 分类图标灰度版 -> 默认灰色 -> 默认图标灰度版
		(string? Url, bool ShouldGrayedOut)[] grayIconSources =
		[
			(item.GrayedIconUri, false),
			(item.IconUri, true),
			(category.DefaultGrayedIconUri, false),
			(category.DefaultIconUri, true),
			(setting.DefaultGrayedIconUri, false),
			(setting.DefaultIconUri, true)
		];

		// 选择实际使用的图标系列
		// 隐藏的项目始终使用隐藏图标
		// 不需要隐藏的项目，根据是否完成，显示正常或灰色图标
		var realSource = (isHidden, isCompleted) switch
		{
			(true, _) => hiddenIconSources,
			(false, true) => normalIconSources,
			(false, false) => grayIconSources
		};

		foreach (var i in realSource)
		{
			if (!string.IsNullOrEmpty(i.Url))
			{
				return i;
			}
		}

		throw new InvalidOperationException("无法找到合适的图标进行显示。请联系管理员修改配置。");
	}
}
