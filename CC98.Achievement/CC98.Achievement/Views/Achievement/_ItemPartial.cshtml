@using CC98
@model AchievementAndUserRecordInfo
@inject AppSettingService<SystemSetting> AppSettingService
@{
	// 分类信息
	var category = (AchievementCategory)ViewBag.Category;

	var borderClasses = new Dictionary<string, bool>
			{
				["border-success"] = Model.CompleteState == AchievementCompleteState.Completed,
				["border-primary"] = Model.CompleteState == AchievementCompleteState.Progress
			};

	var footerClasses = new Dictionary<string, bool>
			{
				["bg-success text-white"] = Model.CompleteState == AchievementCompleteState.Completed,
				//["bg-primary text-white"] = Model.CompleteState == AchievementCompleteState.Progress
			};


	// 是否已经完成，这影响是否彩色显示
	var isCompleted = Model.CompleteState == AchievementCompleteState.Completed;

	// 是否隐藏，隐藏内容会用隐藏模板替代
	var shouldHide = Model.Item.State == AchievementState.Hidden && !isCompleted;

	// 实际要显示的数据
	var itemData =
		shouldHide
			? AppSettingService.Current.HiddenItemTemplate
			: Model.Item;

	// 弹出页的元素 ID
	var popoverElementId =
		shouldHide
			? null
			: $"popover-content-{Model.Item.CategoryName}-{Model.Item.CodeName}";

	// 成就底色
	var cardColor = Model.Item.State switch
	{
		AchievementState.Hidden => "purple",
		AchievementState.Special => "yellow",
		_ => "teal"
	};

	if (!isCompleted)
	{
		cardColor = string.Empty;
	}
}


<div class="special card @cardColor">

	<div class="middle aligned content">
		<img class="ui left floated tiny image" asp-conditional-class-gray="@(!isCompleted)" src="@GetRealIconUri(itemData, category, shouldHide)" alt="成就图标" />

		@if (!shouldHide)
		{
			<partial name="_DetailPopover" model="@Model" />
		}

		<div class="header">@itemData.DisplayName</div>
		<div class="description">@itemData.Description</div>

	</div>


	@if (Model.Record != null)
	{
		switch (Model.CompleteState)
		{
			case AchievementCompleteState.Completed:

				switch (itemData.State)
				{
					case AchievementState.Special:
						<div class="ui yellow right corner label">
							<div data-tooltip="这是一个特殊成就。在你获得这个成就之前，你无法看到这个成就的任何信息。你获得的特殊成就数量将单独记录在成就数据页面，不计入成就总数。">
								<i class="star icon"></i>
							</div>
						</div>

						break;
					case AchievementState.Hidden:
						<div class="ui purple right corner label">
							<div data-tooltip="这是一个隐藏成就。在你获得这个成就之前，你只能看到“隐藏的成就”字样。">
								<i class="star outline icon"></i>
							</div>
						</div>
						break;
				}
				break;

			case AchievementCompleteState.Progress:

				<div class="ui bottom blue attached progress" data-value="@Model.Record.CurrentValue" data-total="@Model.Item.MaxValue">
					<div class="bar"></div>
				</div>

				break;
		}
	}

</div>

@functions
{
	/// <summary>
	/// 获取成就项需要显示的实际图标。
	/// </summary>
	/// <param name="item">要显示的成就项目。</param>
	/// <param name="category">成就项目对应的分类。</param>
	/// <param name="isHidden">该项目是否隐藏</param>
	/// <returns>实际显示项目的 URL。</returns>
	private string GetRealIconUri(AchievementItem item, AchievementCategory category, bool isHidden)
	{
		return !isHidden
			// 未隐藏项目：实际图标 -> 分类默认图标 -> 全局默认图标
			? item.IconUri ?? category.DefaultIconUri ?? AppSettingService.Current.DefaultIconUri
			// 隐藏项目：分类隐藏图标 -> 全局默认隐藏模板图标 -> 全局默认图标
			: category.DefaultHideIconUri ?? AppSettingService.Current.HiddenItemTemplate.IconUri ?? AppSettingService.Current.DefaultIconUri;
	}
}
